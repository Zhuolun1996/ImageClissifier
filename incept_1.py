from keras.applications.vgg16 import VGG16
from keras.layers import Input
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import numpy as np
from sklearn.preprocessing import LabelEncoder
from keras.utils import np_utils
from sklearn.model_selection import train_test_split
from keras import backend as K
from keras.models import Model

K.set_image_dim_ordering('tf')

# this could also be the output a different Keras model or layer
input_tensor = Input(shape=(64, 64, 3))  # this assumes K.image_data_format() == 'channels_last'

batch_size = 64
num_classes = 10
epochs = 5
data_augmentation = True

# input image dimensions
img_rows, img_cols = 64,64

train_X=np.load('dataSet64.npy')
train_y=np.load('label.npy')


x_train, x_test, y_train, y_test = train_test_split(
    train_X, train_y, test_size=0.3, random_state=0)

# The data, shuffled and split between train and test sets:
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

y_test_raw=y_test

encoder = LabelEncoder()
y_train = encoder.fit_transform(y_train)
y_test = encoder.fit_transform(y_test)

y_test_cache=y_test
# Convert class vectors to binary class matrices.
y_train = np_utils.to_categorical(y_train, num_classes)
y_test = np_utils.to_categorical(y_test, num_classes)

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 3, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 3, img_rows, img_cols)
    input_tensor = Input(shape=(3, 64, 64))
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 3)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 3)
    input_tensor = Input(shape=(64, 64, 3))

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255



model_vgg16_conv = VGG16(weights='imagenet', include_top=False)
model_vgg16_conv.summary()
input_shape = Input(shape=(64,64,3),name = 'image_input')
#Use the generated model 
output_vgg16_conv = model_vgg16_conv(input_shape)

#Add the fully-connected layers 
x = Flatten(name='flatten')(output_vgg16_conv)
x = Dense(512, activation='relu', name='fc1')(x)
x = Dense(512, activation='relu', name='fc2')(x)
x = Dense(10, activation='softmax', name='predictions')(x)

my_model = Model(input=input_shape, output=x)
my_model.summary()
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

my_model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])
if not data_augmentation:
    print('Not using data augmentation.')
    my_model.fit(x_train, y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_test, y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    my_model.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                        steps_per_epoch=x_train.shape[0] // batch_size,
                        epochs=epochs,
                        validation_data=(x_test, y_test))
my_model.save('imageModelVGGTrans64.h5')
score = my_model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
